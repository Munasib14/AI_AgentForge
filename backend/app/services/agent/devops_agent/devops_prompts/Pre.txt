# Refactor the Jenkins pipeline script below.

Improve it by:
- Using parameters instead of hardcoded strings (like image names, branches)
- Adding comments for each stage
- Including basic error handling (e.g., try/catch or post-build steps)
- Following Jenkins pipeline best practices

{{ input_infra }}  


# # Transform the Jenkins pipeline script below into an equivalent GitHub Actions workflow.

# ## Guidelines:
# - Use `jobs` and `steps` structure.
# - Replace shell commands (`sh`) with `run`.
# - Use GitHub Actions' built-in actions like `actions/checkout@v3`.
# - Use `secrets` instead of Jenkins `credentialsId`.
# - Follow GitHub Actions YAML best practices.
# - Preserve stage names and logical flow.

# ## Input Jenkinsfile:
# {{ input_infra }}

# ## Output GitHub Actions Workflow:



{
  "infra_description": "pipeline { agent any stages { stage('Build') { steps { sh './gradlew build' } } stage('Test') { steps { sh './gradlew test' } } } }",
  "prompt_name": "jenkins_pipeline.j2"
}


{
  "infra_description": "pipeline {\n  agent any\n  stages {\n    stage('Install Dependencies') {\n      steps {\n        sh 'python -m pip install --upgrade pip'\n        sh 'pip install -r requirements.txt'\n      }\n    }\n    stage('Lint') {\n      steps {\n        sh 'flake8 .'\n      }\n    }\n    stage('Test') {\n      steps {\n        sh 'pytest tests/'\n      }\n    }\n  }\n}",
  "prompt_name": "jenkins_pipeline.j2"
}

{
  "infra_description": "resource \"aws_instance\" \"web\" {\n  ami = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n}",
  "prompt_name": "terraform_module.j2"
}



{
  "infra_description": "trigger:\n  - main\n\npool:\n  vmImage: 'windows-latest'\n\nvariables:\n  buildConfiguration: 'Release'\n  sonarProjectKey: 'DummyProjectKey'\n  sonarProjectName: 'DummyProjectName'\n  sonarHostUrl: 'https://dummy-sonarqube-url.com'\n  sonarLogin: 'dummy_token_123456'\n\nsteps:\n- task: UseDotNet@2\n  inputs:\n    packageType: 'sdk'\n    version: '6.0.x'\n\n- task: SonarQubePrepare@5\n  inputs:\n    SonarQube: 'DummyServiceConnection'\n    scannerMode: 'MSBuild'\n    projectKey: '$(sonarProjectKey)'\n    projectName: '$(sonarProjectName)'\n    extraProperties: |\n      sonar.exclusions=**/bin/**,**/obj/**\n      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml\n\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'restore'\n    projects: '**/*.csproj'\n\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'build'\n    projects: '**/*.csproj'\n    arguments: '--configuration $(buildConfiguration)'\n\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'test'\n    projects: '**/*Tests/*.csproj'\n    arguments: '--configuration $(buildConfiguration) --collect:\"XPlat Code Coverage\"'\n    publishTestResults: true\n\n- task: SonarQubeAnalyze@5\n\n- task: SonarQubePublish@5\n  inputs:\n    pollingTimeoutSec: '300'",
  "prompt_name": "Azure_DevOps_pipeline.j2"
}


{
  "infra_description": "trigger:\n  - main\n\npool:\n  vmImage: 'windows-latest'\n\nvariables:\n  buildConfiguration: 'Release'\n  sonarProjectKey: 'DummyProjectKey'\n  sonarProjectName: 'DummyProjectName'\n  sonarHostUrl: 'https://dummy-sonarqube-url.com'\n  sonarLogin: 'dummy_token_123456'\n\nsteps:\n- task: UseDotNet@2\n  inputs:\n    packageType: 'sdk'\n    version: '6.0.x'\n\n- task: SonarQubePrepare@5\n  inputs:\n    SonarQube: 'DummyServiceConnection'\n    scannerMode: 'MSBuild'\n    projectKey: '$(sonarProjectKey)'\n    projectName: '$(sonarProjectName)'\n    extraProperties: |\n      sonar.exclusions=**/bin/**,**/obj/**\n      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/dotnet-demo/**/coverage.opencover.xml\n\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'restore'\n    projects: 'dotnet-demo/DemoProject/DemoProject.csproj'\n\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'build'\n    projects: 'dotnet-demo/DemoProject/DemoProject.csproj'\n    arguments: '--configuration $(buildConfiguration)'\n\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'test'\n    projects: 'dotnet-demo/DemoProject/DemoProject.csproj'\n    arguments: '--configuration $(buildConfiguration) --collect:\"XPlat Code Coverage\"'\n    publishTestResults: true\n\n- task: SonarQubeAnalyze@5\n\n- task: SonarQubePublish@5\n  inputs:\n    pollingTimeoutSec: '300'",
  "prompt_name": "Azure_DevOps_pipeline.j2"
}
